{"version":3,"sources":["styles/card.module.css","styles/playBoard.module.css","components/card.js","actions/layoutActions.js","constants/actionTypes.js","components/controlPanel.js","constants/gameComplexities.js","components/timer.js","constants/gameStates.js","components/celebration2.js","components/welcomeScreen.js","containers/playBoard.js","serviceWorker.js","helpers/layoutHelpers.js","constants/defaultStoreValues.js","reducers/layoutReducer.js","reducers/index.js","middleware.js","createStore.js","index.js","styles/celebration2.module.css","styles/welcomeScreen.module.css","styles/controlPanel.module.css","styles/timer.module.css"],"names":["module","exports","Card","props","state","isFlipped","imgUrl","this","url","id","row","col","className","styles","cardContainer","onClick","flip","scene","card","cardFace","cardFaceFront","logoSmall","alt","src","process","cardFaceBack","cardImg","Component","toggleFlipAllTiles","forceState","undefined","flipDone","previewFlip","type","ControlPanel","storeData","store","getState","setState","tileCount","fp","dispatch","setTileCount","modalBackground","modal","e","stopPropagation","controlPanelContainer","box","controlElement","title","radiosContainer","name","_setTileCount","defaultChecked","htmlFor","hidden","reset","_resetMatrix","nextProps","connect","ownProps","Timer","millis","timer","running","prevProps","gameState","resumeTimer","resetTimer","pauseTimer","toggleTimer","clearInterval","timerFunc","setInterval","updateMillis","resetTime","elapsedMs","duration","seconds","parseInt","minutes","hours","msToTime","nextStoreData","Celebration2","celebrationContainer","width","height","celebrationText","_resetGame","WelcomeScreen","setTimeout","doc","window","document","body","style","overflowY","welcomeContainer","logo","PlayBoard","selectedStateMatrix","celebration","showControlPanel","toggleFlipTile","stateMatrix","map","line","indexRow","matrixLine","key","indexColumn","imgId","flipped","_flipTile","controlPanel","particles","celebrate","cards","_generateMatrixDivs","particleContainer","container","topBar","settingsCog","cardsContainer","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","generateSelectedStateMatrix","complexity","urlList","length","Array","i","Math","floor","random","timesUsed","originalIdx","createUrlList","columnCount","rowCount","sqrt","j","urlIndex","done","splice","populateStateMatrix","flipTile","matrix","isMatch","item","isImageAlreadyFlipped","countFlippedCards","countUndone","flippedCount","isCardFlippedAndUndone","isCardFlipped","reducers","action","newSelectedStateMatrix","toggleMatrixState","slice","defaultSoreValues","defaultStoreValues","newState","Middleware","next","clearTimeout","flipTimer","flippedCardsCount","combinedReducer","reducer","combinedMiddleware","middleware","thunk","createStore","combineReducers","applyMiddleware","apply","backgroundImage","backgroundPosition","backgroundRepeat","backgroundSize","boxShadow","onbeforeunload","scrollTo","ReactDOM","render","getElementById","URL","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d2e82745.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardContainer\":\"card_cardContainer__1KQYX\",\"scene\":\"card_scene__1NQl8\",\"card\":\"card_card__3Qqba\",\"cardFace\":\"card_cardFace__3mHGW\",\"cardFaceFront\":\"card_cardFaceFront__22RVc\",\"cardFaceBack\":\"card_cardFaceBack__2OWPn\",\"isFlipped\":\"card_isFlipped__VpkoQ\",\"logoSmall\":\"card_logoSmall__1xBnl\",\"cardImg\":\"card_cardImg__1x9mf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"playBoard_container__11AN-\",\"topBar\":\"playBoard_topBar__3taUn\",\"settingsCog\":\"playBoard_settingsCog__1Pf5d\",\"matrixLine\":\"playBoard_matrixLine__2yL0-\",\"cardsContainer\":\"playBoard_cardsContainer__q61rO\",\"particleContainer\":\"playBoard_particleContainer__1PqG6\"};","import React, {Component} from 'react';\nimport styles from '../styles/card.module.css';\n//\n\nclass Card extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state={\n            isFlipped: this.props.isFlipped\n        };\n    }\n\n    render() {\n        let imgUrl = this.props.url;\n        return (\n            <div id={`${this.props.row}-${this.props.col}`} className={styles.cardContainer} onClick={() => this.props.flip()}>\n                <div className={styles.scene}>\n                    <div className={`${styles.card}  ${this.props.isFlipped ? styles.isFlipped : ''}`}>\n                        <div className={`${styles.cardFace} ${styles.cardFaceFront}`}>\n                            <img className={styles.logoSmall} alt='logo' src={process.env.PUBLIC_URL + '/assets/logo_small.svg'}/>\n                        </div>\n                        <div className={`${styles.cardFace} ${styles.cardFaceBack}`}>\n                            <img className={styles.cardImg} alt={`${this.props.row}-${this.props.col}`} src={imgUrl}></img>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Card;\n","import {\n    FLIP_TILE,\n    RESET_TILES,\n    SET_TILE_COUNT,\n    TOGGLE_CELEBRATION,\n    TOGGLE_FLIP_ALL_TILES,\n    TOGGLE_CONTROL_PANEL_VISIBILITY,\n    START_TIMER,\n    RESET_GAME\n} from \"../constants/actionTypes\";\n\nexport function setTileCount(tileCount) {\n    return {type: SET_TILE_COUNT, tileCount};\n}\n\nexport function toggleFlipAllTiles(forceState = undefined, flipDone = true, previewFlip = false) {\n    return {type: TOGGLE_FLIP_ALL_TILES, forceState, flipDone, previewFlip};\n}\n\nexport function toggleFlipTile(row, col) {\n    return {type: FLIP_TILE, row, col};\n}\n\nexport function resetTiles() {\n    return {type: RESET_TILES};\n}\n\nexport function toggleCelebration() {\n    return {type: TOGGLE_CELEBRATION};\n}\n\nexport function toggleControlPanelVisibility() {\n  return {type: TOGGLE_CONTROL_PANEL_VISIBILITY};\n}\n\nexport function startTimer() {\n  return {type: START_TIMER};\n}\n\nexport function resetGame() {\n    return {type: RESET_GAME};\n}\n","export const IGNORE = 'IGNORE';\nexport const SET_TILE_COUNT = 'SET_TILE_COUNT';\nexport const TOGGLE_FLIP_ALL_TILES = 'TOGGLE_FLIP_ALL_TILES';\nexport const FLIP_TILE = 'FLIP_TILE';\nexport const RESET_TILES = 'RESET_TILES';\nexport const TOGGLE_CELEBRATION = 'TOGGLE_CELEBRATION';\nexport const TOGGLE_CONTROL_PANEL_VISIBILITY = 'TOGGLE_CONTROL_PANEL_VISIBILITY';\nexport const START_TIMER = 'START_TIMER';\nexport const RESET_GAME = 'RESET_GAME';\n","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport styles from '../styles/controlPanel.module.css';\nimport {resetTiles, setTileCount, toggleControlPanelVisibility} from \"../actions/layoutActions\";\nimport {SIX_BY_SIX, TWO_BY_TWO, FOUR_BY_FOUR, NOT_BY_NOT, TWO_BY_FOUR, FOUR_BY_SIX, THREE_BY_FOUR, FIVE_BY_SIX} from \"../constants/gameComplexities\";\n\nconst mapStateToProps = (state, ownProps) => {\n    return {tileCount: state.fp.tileCount};\n};\n\nclass ControlPanel extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state={};\n    }\n\n    componentDidMount() {\n        let store = this.props.store;\n        let storeData = store.getState();\n\n        this.setState({\n            ...this.state,\n            tileCount: storeData.fp.tileCount\n        });\n    }\n\n    static getDerivedStateFromProps(nextProps, state) {\n        let store = nextProps.store;\n        let storeData = store.getState();\n\n        if (nextProps && storeData) {\n            state.tileCount = storeData.fp.tileCount;\n            return state;\n        }\n        return null;\n    }\n    _setTileCount(tileCount, store) {\n        if (store !== undefined && tileCount > 0) {\n            store.dispatch(setTileCount(tileCount));\n        }\n    }\n\n    _resetMatrix(store) {\n        if (store !== undefined) {\n            store.dispatch(resetTiles());\n        }\n    }\n\n    render() {\n        let store = this.props.store;\n        let storeData = store.getState();\n        let tileCount = storeData.fp.tileCount;\n\n        return (\n            <div className={styles.modalBackground} onClick={() => this.props.store.dispatch(toggleControlPanelVisibility())}>\n                <div className={styles.modal} onClick={(e) => e.stopPropagation()}>\n                    <div className={styles.controlPanelContainer}>\n                        <div className={styles.box}>\n                            <div className={styles.controlElement}>\n                                <div className={styles.title}>Choose Game Complexity</div>\n                            </div>\n                            <div className={styles.radiosContainer}>\n                              <div className={styles.controlElement}>\n                                  <input type=\"radio\" id=\"radio1\" name=\"radio1\" onClick={() => this._setTileCount(TWO_BY_TWO, this.props.store)} defaultChecked={tileCount === TWO_BY_TWO}/>\n                                  <label htmlFor=\"radio1\">{TWO_BY_TWO}</label>\n                              </div>\n\n                              <div className={styles.controlElement}>\n                                  <input type=\"radio\" id=\"radio2\" name=\"radio2\" onClick={() => this._setTileCount(TWO_BY_FOUR, this.props.store)} defaultChecked={tileCount === TWO_BY_FOUR}/>\n                                  <label htmlFor=\"radio2\">{TWO_BY_FOUR}</label>\n                              </div>\n\n                              <div className={styles.controlElement}>\n                                  <input type=\"radio\" id=\"radio3\" name=\"radio3\" onClick={() => this._setTileCount(THREE_BY_FOUR, this.props.store)} defaultChecked={tileCount === THREE_BY_FOUR}/>\n                                  <label htmlFor=\"radio3\">{THREE_BY_FOUR}</label>\n                              </div>\n\n                              <div className={styles.controlElement}>\n                                  <input type=\"radio\" id=\"radio4\" name=\"radio4\" onClick={() => this._setTileCount(FOUR_BY_FOUR, this.props.store)} defaultChecked={tileCount === FOUR_BY_FOUR}/>\n                                  <label htmlFor=\"radio4\">{FOUR_BY_FOUR}</label>\n                              </div>\n\n                              <div className={styles.controlElement}>\n                                  <input type=\"radio\" id=\"radio5\" name=\"radio5\" onClick={() => this._setTileCount(FOUR_BY_SIX, this.props.store)} defaultChecked={tileCount === FOUR_BY_SIX}/>\n                                  <label htmlFor=\"radio5\">{FOUR_BY_SIX}</label>\n                              </div>\n\n                              <div className={styles.controlElement}>\n                                  <input type=\"radio\" id=\"radio6\" name=\"radio6\" onClick={() => this._setTileCount(FIVE_BY_SIX, this.props.store)} defaultChecked={tileCount === FIVE_BY_SIX}/>\n                                  <label htmlFor=\"radio6\">{FIVE_BY_SIX}</label>\n                              </div>\n\n                              <div className={styles.controlElement}>\n                                  <input type=\"radio\" id=\"radio7\" name=\"radio7\" onClick={() => this._setTileCount(SIX_BY_SIX, this.props.store)} defaultChecked={tileCount === SIX_BY_SIX}/>\n                                  <label htmlFor=\"radio7\">{SIX_BY_SIX}</label>\n                              </div>\n                            </div>\n                            <div className={`${styles.controlElement} ${tileCount === NOT_BY_NOT ? styles.hidden : ''}`}>\n                                <div className={styles.reset} onClick={() => this._resetMatrix(this.props.store)}>reset</div>\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default  connect(mapStateToProps) (ControlPanel);\n","export const NOT_BY_NOT = 0;\nexport const TWO_BY_TWO = 4;\nexport const TWO_BY_FOUR = 8;\nexport const THREE_BY_FOUR = 12;\nexport const FOUR_BY_FOUR = 16;\nexport const FOUR_BY_SIX = 24;\nexport const FIVE_BY_SIX = 30;\nexport const SIX_BY_SIX = 36;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport styles from '../styles/timer.module.css';\nimport {FINISHED, HALTED, STARTED, RESET} from '../constants/gameStates';\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    gameState: state.fp.gameState,\n    tileCount: state.fp.tileCount\n  };\n};\nclass Timer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state={\n          tileCount: this.props.store.getState().fp.tileCount\n        };\n    }\n\n    componentDidMount() {\n        this.setState({\n            ...this.state,\n            millis: 0,\n            timer: undefined,\n            running: false,\n        });\n\n    }\n\n    componentDidUpdate(prevProps) {\n      // Typical usage (don't forget to compare props):\n      if (this.state.timer === undefined &&\n            (this.props.store.getState().fp.gameState === STARTED || \n            this.props.store.getState().fp.gameState === RESET)) {\n        this.toggleTimer();\n      } else if (this.state.timer !== undefined && this.state.running &&\n          (this.props.store.getState().fp.gameState === HALTED || \n          this.props.store.getState().fp.gameState === FINISHED)) {\n          this.pauseTimer();\n      } else if (this.state.timer !== undefined && this.state.running === false &&\n          this.props.store.getState().fp.gameState === STARTED) {\n          this.resumeTimer();\n      } else if (this.state.timer !== undefined && this.state.running === false &&\n          this.props.store.getState().fp.gameState === RESET) {\n          this.resetTimer();\n      }\n    }\n\n    static getDerivedStateFromProps(nextProps, state) {\n        let nextStore = nextProps.store;\n        let nextStoreData = nextStore.getState();\n\n        if (state && nextStoreData) {\n            state.gameState = nextProps.store.getState().fp.gameState;\n            if (nextStoreData.fp.tileCount !== state.tileCount){\n              state.resetTime = true;\n              state.tileCount = nextStoreData.fp.tileCount;\n            }\n            \n            return state;\n        }\n        return null;\n    }\n\n    resetTimer() {\n      clearInterval(this.state.timer);\n      this.setState({\n        ...this.state,\n        millis: 0,\n        timer: undefined,\n        running: false,\n    });\n    }\n\n    toggleTimer() {\n      let timerFunc = undefined;\n      clearInterval(this.state.timer);\n      if (this.state.timer) {\n          this.setState({\n              ...this.state,\n              timer: undefined,\n              running: false,\n          });\n      } else {\n        let interval = 100;\n        timerFunc = setInterval(() => this.updateMillis(interval),interval);\n      }\n      this.setState({\n        ...this.state,\n        timer: timerFunc,\n        running: true,\n      });\n    }\n\n    pauseTimer() {\n        this.setState({\n            ...this.state,\n            running: false,\n        });\n    }\n\n    resumeTimer() {\n        let millis = this.state.resetTime ? 0 : this.state.millis;\n        this.setState({\n            ...this.state,\n            running: true,\n            millis,\n            resetTime: false,\n        });\n    }\n\n\n    updateMillis(elapsedMs) {\n        if (this.state.running){\n            let millis = this.state.millis + elapsedMs;\n            this.setState({\n                ...this.state,\n                millis,\n            });\n        }\n    }\n\n    msToTime(duration) {\n      let seconds = duration === 0 ? 0 : parseInt((duration/1000)%60)\n          , minutes = duration === 0 ? 0 : parseInt((duration/(1000*60))%60)\n          , hours = duration === 0 ? 0 : parseInt((duration/(1000*60*60))%24);\n\n      hours = (hours < 10) ? \"0\" + hours : hours;\n      minutes = (minutes < 10) ? \"0\" + minutes : minutes;\n      seconds = (seconds < 10) ? \"0\" + seconds : seconds;\n\n      return hours + \":\" + minutes + \":\" + seconds;\n    }\n\n    render() {\n      return (\n        <div className={styles.timer}>\n          <div>{this.msToTime(this.state.millis)}</div>\n        </div>\n      );\n    }\n}\nexport default connect(mapStateToProps)(Timer);\n","export const HALTED = 'HALTED';\nexport const STARTED = 'STARTED';\nexport const FINISHED = 'FINISHED';\nexport const RESET = 'RESET';\n","import React, {Component} from 'react';\nimport styles from '../styles/celebration2.module.css';\nimport Particles from 'react-particles-js';\nimport { resetGame } from '../actions/layoutActions';\n\nclass Celebration2 extends Component {\n    _resetGame(store) {\n        if (store !== undefined) {\n            store.dispatch(resetGame());\n        }\n    }\n    \n    render() {\n        return (\n            <div className={styles.celebrationContainer}>\n                <Particles width='100vw' height='100vh'/>\n                <div className={styles.celebrationText}>\n                    Good Job\n                </div>\n                <div className={styles.reset} onClick={() => this._resetGame(this.props.store)}>Play Again</div>\n            </div>\n        );\n    }\n}\n\nexport default Celebration2;","import React, {Component} from 'react';\nimport styles from '../styles/welcomeScreen.module.css';\n\nclass WelcomeScreen extends Component {\n    componentDidMount() {\n        setTimeout(() => {\n            let doc = window.document;\n            if (doc !== null && doc !== undefined) {\n                doc.body.style.overflowY = 'auto'\n            }\n        }, 2100);\n    }\n\n    render() {\n        return (\n            <div className={styles.welcomeContainer} id=\"welcomeScreen\">\n                <section>\n                    <img className={styles.logo} alt='logo' src={process.env.PUBLIC_URL + '/assets/logo.svg'}/>\n                </section>\n            </div>\n        );\n    }\n}\n\nexport default WelcomeScreen;","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport Particles from 'react-particles-js';\nimport styles from '../styles/playBoard.module.css';\n// components\nimport Card from '../components/card';\nimport ControlPanel from '../components/controlPanel';\nimport Timer from '../components/timer';\n//actions\nimport {toggleFlipTile, toggleControlPanelVisibility} from \"../actions/layoutActions\";\nimport Celebration2 from \"../components/celebration2\";\nimport WelcomeScreen from '../components/welcomeScreen';\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        tileCount: state.fp.tileCount,\n        selectedStateMatrix: state.fp.selectedStateMatrix,\n        celebration: state.fp.celebration,\n        showControlPanel: state.fp.showControlPanel,\n    };\n};\n\nclass PlayBoard extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state={};\n    }\n\n    componentDidMount() {\n        let store = this.props.store;\n        let storeData = store.getState();\n\n        this.setState({\n            ...this.state,\n            tileCount: storeData.fp.tileCount,\n            selectedStateMatrix: storeData.fp.selectedStateMatrix,\n            celebration: storeData.fp.celebration,\n            showControlPanel: storeData.fp.showControlPanel,\n        });\n    }\n\n    static getDerivedStateFromProps(nextProps, state) {\n        let store = nextProps.store;\n        let storeData = store.getState();\n\n        if (nextProps && storeData) {\n            state.tileCount = storeData.fp.tileCount;\n            state.selectedStateMatrix = storeData.fp.selectedStateMatrix;\n            state.celebration = storeData.fp.celebration;\n            state.showControlPanel = storeData.fp.showControlPanel;\n            return state;\n        }\n        return null;\n    }\n\n    _flipTile(row, col) {\n        if (this.props.store !== undefined) {\n            this.props.store.dispatch(toggleFlipTile(row, col));\n        }\n    }\n\n    _generateMatrixDivs() {\n        let store = this.props.store;\n        let storeData = store.getState();\n        let stateMatrix = storeData.fp.selectedStateMatrix;\n\n        if (stateMatrix !== undefined) {\n        return stateMatrix.map((line, indexRow) => {\n            return (\n                <div className={styles.matrixLine} key={indexRow}>\n                    {\n                        line.map((card, indexColumn) => {\n                            let cardElm = (\n                                <Card key={`${indexRow}-${indexColumn}`}\n                                      row={indexRow}\n                                      col={indexColumn}\n                                      url={stateMatrix[indexRow][indexColumn].url}\n                                      imgId={stateMatrix[indexRow][indexColumn].imgId}\n                                      isFlipped={card.flipped}\n                                      flip={() => this._flipTile(indexRow, indexColumn)}/>\n                            );\n                            return cardElm;\n                        })\n                    }\n                </div>\n            );\n        });\n        }\n    }\n\n\n    render() {\n        let cards = this._generateMatrixDivs();\n        let controlPanel;\n        if (this.state.showControlPanel) {\n          controlPanel = (<ControlPanel store={this.props.store} />);\n        }\n        let particles;\n        let celebrate;\n        if (this.state.celebration) {\n            celebrate = (<Celebration2 store={this.props.store}/>);\n        } else {\n            particles = (\n                <div className={styles.particleContainer}>\n                    <Particles width='100vw' height='100vh'/>\n                </div>\n            );\n        }\n        return (\n            <div className={styles.container}>\n                <WelcomeScreen/>\n                {celebrate}\n                {particles}\n                {controlPanel}\n                <div className={styles.topBar}>\n                  <Timer store={this.props.store}/>\n                  <img className={styles.settingsCog} alt='cog' src={process.env.PUBLIC_URL + '/assets/settings.svg'} onClick={() => this.props.store.dispatch(toggleControlPanelVisibility())}/>\n                </div>\n                <div className={styles.cardsContainer}>\n                    {cards}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default  connect(mapStateToProps) (PlayBoard);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {SIX_BY_SIX, TWO_BY_TWO, FOUR_BY_FOUR, NOT_BY_NOT, TWO_BY_FOUR, FOUR_BY_SIX, THREE_BY_FOUR, FIVE_BY_SIX} from \"../constants/gameComplexities\";\n\nexport function generateSelectedStateMatrix(complexity) {\n    let selectedStateMatrix;\n    if (complexity > NOT_BY_NOT) {\n        let urlList = createUrlList(complexity / 2);\n        let columnCount = 0;\n        let rowCount = 0;\n        switch (complexity) {\n            case TWO_BY_TWO:\n            case FOUR_BY_FOUR:\n            case SIX_BY_SIX:\n                columnCount = Math.sqrt(complexity);\n                rowCount = columnCount; \n                break;\n            case TWO_BY_FOUR:\n                columnCount = 2;\n                rowCount = 4;\n                break;\n            case THREE_BY_FOUR:\n                columnCount = 3;\n                rowCount = 4;\n                break;\n            case FOUR_BY_SIX:\n                columnCount = 4;\n                rowCount = 6;\n                break;\n            case FIVE_BY_SIX:\n                columnCount = 5;\n                rowCount = 6;\n                break;\n            default:\n                columnCount = 2;\n                rowCount = 2;\n                break;\n        }\n        selectedStateMatrix = populateStateMatrix(columnCount, rowCount, urlList);\n    }\n    return selectedStateMatrix;\n}\n\nexport function toggleMatrixState(matrix, forceState, flipDone) {\n    if (matrix !== undefined) {\n        for (let i = 0; i < matrix.length; i++) {\n            for (let j = 0; j < matrix[i].length; j++) {\n                if ((!flipDone && !matrix[i][j].done) || flipDone) {\n                    matrix[i][j].flipped = forceState !== undefined ? forceState : !matrix[i][j].flipped;\n                    matrix[i][j].done = false;\n                }\n            }\n        }\n    }\n    return matrix;\n}\n\nexport function flipTile(matrix, row, col) {\n    if (matrix !== undefined && row !== undefined && col !== undefined && !matrix[row][col].done) {\n        if (matrix[row][col].done === false) {\n            if (!matrix[row][col].flipped) {\n                let isMatch = isImageAlreadyFlipped(matrix, matrix[row][col].imgId);\n                matrix[row][col].done = isMatch;\n            }\n            matrix[row][col].flipped = !matrix[row][col].flipped;\n        }\n\n    }\n    return matrix;\n}\n\nexport function countFlippedCards(matrix, countUndone = false) {\n    let flippedCount = 0;\n    if (matrix !== undefined  && matrix.length > 0){\n        for (let i=0; i < matrix.length; i++){\n            for (let j=0; j < matrix[i].length; j++){\n                if ((countUndone && isCardFlippedAndUndone(matrix[i][j])) || (!countUndone && isCardFlipped(matrix[i][j]))) {\n                    flippedCount++;\n                }\n            }\n        }\n    }\n    return flippedCount;\n}\n\nfunction populateStateMatrix(columnCount, rowCount, urlList) {\n    let selectedStateMatrix = new Array(rowCount);\n\n    for (let i = 0; i < selectedStateMatrix.length; i++) {\n        selectedStateMatrix[i] = new Array(columnCount);\n        for (let j = 0; j < selectedStateMatrix[i].length; j++) {\n            let urlIndex = Math.floor(Math.random() * urlList.length)\n            selectedStateMatrix[i][j] = {\n                flipped: true,\n                done: false,\n                url: urlList[urlIndex].url,\n                imgId: urlList[urlIndex].originalIdx,\n            };\n\n            urlList[urlIndex].timesUsed = urlList[urlIndex].timesUsed + 1;\n            if (urlList[urlIndex].timesUsed > 1) {\n                urlList.splice(urlIndex, 1);\n            }\n        }\n    }\n\n    return selectedStateMatrix;\n}\n\nfunction isCardFlippedAndUndone(card) {\n    if (card !== undefined) {\n        return card.flipped && !card.done\n    }\n    return false;\n}\n\nfunction isCardFlipped(card) {\n    if (card !== undefined) {\n        return card.flipped;\n    }\n    return false;\n}\n\nfunction createUrlList(length) {\n    let urlList = new Array(length);\n    for (let i=0; i<urlList.length; i++){\n        urlList[i] = {\n            url: (\"https://picsum.photos/300/300?bust=\" + Math.floor(Math.random() * Math.floor(length)) + i),\n            timesUsed: 0,\n            originalIdx: i,\n        }\n    }\n    return urlList;\n}\n\nfunction isImageAlreadyFlipped(matrix, imgId) {\n    let item = undefined;\n    if (matrix !== undefined && imgId !== undefined) {\n        for (let i = 0; i < matrix.length; i++) {\n            for (let j = 0; j < matrix[i].length; j++) {\n                if (matrix[i][j].imgId === imgId && matrix[i][j].flipped === true) {\n                    item = matrix[i][j];\n                }\n            }\n        }\n    }\n\n    if (item !== undefined) {\n        item.done = true;\n    }\n    return item !== undefined;\n}\n\n","import {generateSelectedStateMatrix} from \"../helpers/layoutHelpers\";\nimport {NOT_BY_NOT} from \"./gameComplexities\";\nimport {HALTED} from \"./gameStates\";\n\nexport default {\n    tileCount: NOT_BY_NOT,\n    showControlPanel: true,\n    previewFlip : true,\n    selectedStateMatrix: generateSelectedStateMatrix(NOT_BY_NOT),\n    celebration: false,\n    gameState: HALTED,\n}\n","import {\n    FLIP_TILE,\n    RESET_TILES,\n    SET_TILE_COUNT,\n    TOGGLE_CELEBRATION,\n    TOGGLE_FLIP_ALL_TILES,\n    TOGGLE_CONTROL_PANEL_VISIBILITY,\n    RESET_GAME\n} from '../constants/actionTypes';\nimport {flipTile, generateSelectedStateMatrix, toggleMatrixState} from \"../helpers/layoutHelpers\";\nimport {HALTED, STARTED, RESET} from '../constants/gameStates';\nimport defaultSoreValues from '../constants/defaultStoreValues';\n\nexport default(state, action) => {\n  let newSelectedStateMatrix;\n  switch(action.type) {\n    case SET_TILE_COUNT:\n        return {\n            ...state,\n            tileCount: action.tileCount,\n            selectedStateMatrix: generateSelectedStateMatrix(action.tileCount),\n            previewFlip: true,\n            celebration: false,\n            showControlPanel: false,\n            gameState: STARTED,\n        };\n      case RESET_TILES:\n        return {\n            ...state,\n            selectedStateMatrix: generateSelectedStateMatrix(state.tileCount),\n            previewFlip: true,\n            celebration: false,\n            showControlPanel: false,\n            gameState: RESET,\n        };\n      case TOGGLE_FLIP_ALL_TILES:\n          newSelectedStateMatrix = toggleMatrixState(state.selectedStateMatrix.slice(), action.forceState, action.flipDone);\n\n          return {\n              ...state,\n              selectedStateMatrix: newSelectedStateMatrix,\n              previewFlip: action.previewFlip,\n          };\n      case FLIP_TILE:\n          newSelectedStateMatrix = flipTile(state.selectedStateMatrix.slice(), action.row, action.col);\n\n          return {\n              ...state,\n              selectedStateMatrix: newSelectedStateMatrix,\n          };\n      case TOGGLE_CELEBRATION:\n          return {\n              ...state,\n              celebration: !state.celebration,\n              gameState: HALTED\n          };\n      case TOGGLE_CONTROL_PANEL_VISIBILITY:\n          return {\n              ...state,\n              showControlPanel: !state.showControlPanel,\n              gameState: state.showControlPanel ? STARTED : HALTED\n          }\n    case RESET_GAME:\n        return defaultSoreValues;\n            \n    default:\n      return state;\n  }\n};\n","// Constants\nimport defaultStoreValues from '../constants/defaultStoreValues';\n// Reducers\nimport layoutReducer from './layoutReducer';\n// NOTE: when new reducers are created at this level, they must be added to this array\nlet reducers = [\n  layoutReducer\n];\n\nexport default(state = defaultStoreValues, action = {}) => {\n  let newState = state;\n\n  for (let i = 0; i < reducers.length; i++) {\n    newState = reducers[i](newState, action);\n  }\n\n  return newState;\n};\n","import {FLIP_TILE, IGNORE, RESET_TILES, SET_TILE_COUNT, TOGGLE_FLIP_ALL_TILES} from \"./constants/actionTypes\";\nimport {toggleCelebration, toggleFlipAllTiles} from \"./actions/layoutActions\";\nimport {countFlippedCards} from \"./helpers/layoutHelpers\";\n\nexport default function Middleware({getState, dispatch}) {\n  return next => action => {\n      switch (action.type) {\n          case SET_TILE_COUNT:\n          case RESET_TILES:\n              // timer is stored in window so that only one timer at a time exists\n              if (action.tileCount !== getState().fp.tileCount) {\n                  clearTimeout(window.flipTimer);\n                  clearTimeout(window.resetTimer);\n                  window.flipTimer = setTimeout(() => dispatch(toggleFlipAllTiles()), 3000);\n              } else {\n                  action.type = IGNORE;\n              }\n            break;\n          case FLIP_TILE:\n              // check if no more than 2 tiles are flipped at a time\n              let flippedCardsCount = countFlippedCards(getState().fp.selectedStateMatrix, true);\n              if (flippedCardsCount < 2 && !getState().fp.previewFlip) {\n                  clearTimeout(window.resetTimer);\n                  if (flippedCardsCount === 1) {\n                    window.resetTimer = setTimeout(() => dispatch(toggleFlipAllTiles(false, false)), 2000);\n                  }\n              } else {\n                  action.type = IGNORE;\n              }\n            break;\n          case TOGGLE_FLIP_ALL_TILES:\n              if (!action.forceState && !action.flipDone) {\n                  // check if all tiles are flipped\n                  let flippedCardsCount = countFlippedCards(getState().fp.selectedStateMatrix);\n                  if (flippedCardsCount === getState().fp.tileCount) {\n                      // all tiles are flipped, lets celebrate\n                      dispatch(toggleCelebration());\n                  }\n              }\n              break;\n          default:\n            break;\n      }\n      return next(action);\n  }\n}\n","import {createStore, combineReducers, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk'\nimport reducer from './reducers';\nimport middleware from './middleware';\n\n// import systemMiddleware from './middleware/systemMiddleware';\n\n/**\n *\n * @returns {object} created store\n */\nexport default function() {\n  let combinedReducer = {\n    fp: reducer\n  };\n\n  let combinedMiddleware = [middleware, thunk];\n\n  const store = createStore(combineReducers(combinedReducer), applyMiddleware.apply(this, combinedMiddleware));\n\n  if (process.env.NODE_ENV !== 'production') {\n    window.store = store;\n  }\n\n  return store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PlayBoard from './containers/playBoard';\nimport * as serviceWorker from './serviceWorker';\nimport createStore from './createStore';\n\nlet store = createStore();\n\ndocument.body.style.backgroundImage = \"url('https://picsum.photos/500/500?bust=0000')\";\ndocument.body.style.backgroundPosition = \"center\";\ndocument.body.style.backgroundRepeat = \"no-repeat\";\ndocument.body.style.backgroundSize = \"cover\";\ndocument.body.style.boxShadow = \"inset 0 0 0 2000px rgba(93,93,93,0.84)\";\n\nwindow.onbeforeunload = function () {\n    window.scrollTo(0, 0);\n};\n\nReactDOM.render(<PlayBoard store={store} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"celebrationContainer\":\"celebration2_celebrationContainer__3v-Zc\",\"reset\":\"celebration2_reset__1vU_j\",\"celebrationText\":\"celebration2_celebrationText__iVTt-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"welcomeContainer\":\"welcomeScreen_welcomeContainer__3OuO9\",\"welcomeScreen\":\"welcomeScreen_welcomeScreen__1Etib\",\"logo\":\"welcomeScreen_logo__133BL\",\"rotate\":\"welcomeScreen_rotate__2OszT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controlPanelContainer\":\"controlPanel_controlPanelContainer__2DqIc\",\"modalBackground\":\"controlPanel_modalBackground__2BOe2\",\"modal\":\"controlPanel_modal__3S9hw\",\"title\":\"controlPanel_title__ABQUq\",\"box\":\"controlPanel_box__j0oeO\",\"radiosContainer\":\"controlPanel_radiosContainer__G4gEe\",\"controlElement\":\"controlPanel_controlElement__2mapW\",\"hidden\":\"controlPanel_hidden__1QnS1\",\"reset\":\"controlPanel_reset__dW2Xz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"timer\":\"timer_timer__3EvND\"};"],"sourceRoot":""}